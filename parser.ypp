%{

#include <iostream>

#include "output.hpp"
#include "parser.hpp"

using namespace std;
using namespace Parser;
using namespace output;

int yylex();
void yyerror(char const * message);


%}


%token VOID INT BYTE B BOOL AND OR TRUE FALSE RETURN IF WHILE BREAK CONTINUE PRECOND SC COMMA LPAREN RPAREN LBRACE RBRACE RELOP BINOP ID NUM STRING ASSIGN

/* Solving conflicts */
// Exp rules related conflicts
%left  OR //check if needs to be rigt assoc
%left AND //check if needs to be rigt assoc
%nonassoc RELOP
%nonassoc BINOP
%right NOT
// Dangling if else conflict
%nonassoc NO_ELSE
%nonassoc ELSE

%%

Program : M Funcs
{
	
}
;

M : %empty
{
	openGlobalScope();
}
;

LBrace: %empty
{
		
	openScope();
}
;

RBrace: %empty
{
	closeScope();
}
;

Funcs : %empty | FuncDecl Funcs
;

FuncDecl : RetType ID LPAREN Formals RPAREN PreConditions LBRACE LBrace Statements RBRACE RBrace 
;

RetType : Type | VOID
;

Formals : %empty | FormalsList
;

FormalsList : FormalDecl | FormalDecl COMMA FormalsList
;

FormalDecl : Type ID
{
	cout << $2->name << endl;
	cout << $1->name << endl;
	//declareIdentifier($2->type,$2->name);
}
;

PreConditions : %empty | PreConditions PreCondition
;

PreCondition : PRECOND LPAREN Exp RPAREN
;

Statements : Statement | Statements Statement
;

Statement : LBRACE LBrace Statements RBRACE RBrace | Type ID SC | Type ID ASSIGN Exp SC | ID ASSIGN Exp SC | Call SC | RETURN SC | RETURN Exp SC  | WHILE LPAREN Exp RPAREN Statement | BREAK SC | CONTINUE SC | SelectionStatement
;

SelectionStatement: IF LPAREN Exp RPAREN Statement %prec NO_ELSE | IF LPAREN Exp RPAREN Statement ELSE Statement

;

Call : ID LPAREN ExpList RPAREN | ID LPAREN RPAREN
;

ExpList : Exp | Exp COMMA ExpList

Type : INT {$$ = new Node("Type","INT");} | BYTE {$$ = new Node("Type","BYTE");} | BOOL {$$ = new Node("Type","BOOL");}
;

Exp : LPAREN Exp RPAREN | Exp BINOP Exp | ID | Call | NUM | NUM B | STRING | TRUE | FALSE | NOT Exp | Exp AND Exp | Exp OR Exp | Exp RELOP Exp
;

%%

void yyerror(const char * message)
{
	errorSyn(1); //TODO: put real error number
}


int main() {
	return yyparse();
}